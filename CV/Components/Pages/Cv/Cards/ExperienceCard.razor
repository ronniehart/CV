@inject IExperienceService ExperienceService

<RadzenCard id="experience">
    <RadzenText TextStyle="TextStyle.H4" Text="Work Experience" />
    <RadzenTimeline>
        <Items>
            @foreach (var experience in Experiences)
            {
                var isActive = !experience.EndDate.HasValue || experience.EndDate > DateOnly.FromDateTime(DateTime.UtcNow);
                var duration = $"{experience.StartDate.ToString("dd.MM.yyyy")} - ";
                if (experience.EndDate.HasValue)
                {
                    duration += experience.EndDate.Value.ToString("dd.MM.yyyy");
                }
                else
                {
                    isActive = true;
                    duration += "Today";
                }

                <RadzenTimelineItem PointStyle="@(isActive ? PointStyle.Primary : PointStyle.Light)">
                    <LabelContent>
                        <RadzenBadge IsPill="true" BadgeStyle="@(isActive ? BadgeStyle.Primary : BadgeStyle.Light)">
                            @duration
                        </RadzenBadge>
                    </LabelContent>
                    <ChildContent>
                        <RadzenText TextStyle="TextStyle.H5" Text="@experience.Company" />
                        <RadzenText>
                            @experience.Text
                        </RadzenText>
                    </ChildContent>
                </RadzenTimelineItem>
            }
        </Items>
    </RadzenTimeline>
</RadzenCard>

@code {
    private IEnumerable<ExperienceDto> Experiences = [];

    protected override async Task OnInitializedAsync()
    {
        Experiences = await ExperienceService.GetExperiencesAsync();
    }
}