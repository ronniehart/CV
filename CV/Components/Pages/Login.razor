@using Application.Authentication
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject ILogger<Login> Logger
@inject IdentityRedirectManager RedirectManager
@inject SignInManager<IdentityUser> SignInManager

@page "/Account/Login"

<RadzenRow>
    <RadzenColumn Size="2" />
    <RadzenColumn Size="8">
        <RadzenText TextStyle="TextStyle.H2" Text="Login" TextAlign="TextAlign.Center" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUserAsync" FormName="login">
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Username" class="form-control" autocomplete="username" aria-required="true" placeholder="Username" />
                <label for="username" class="form-label">Username</label>
                <ValidationMessage For="() => Input.Username" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                <label for="password" class="form-label">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <RadzenAlert AlertStyle="AlertStyle.Danger" Variant="Variant.Flat" Text="@ErrorMessage" AllowClose="false" />
            }
            <div>
                <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
            </div>
        </EditForm>
    </RadzenColumn>
    <RadzenColumn Size="2" />
</RadzenRow>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? ErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ApplicationScheme);
        }
    }

    private async Task LoginUserAsync()
    {
        var result = await SignInManager.PasswordSignInAsync(
            Input.Username, Input.Password, false, lockoutOnFailure: true);

        if (result.Succeeded)
        {
            Logger.LogInformation("Successful login from IP '{}'",
                HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown");

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User '{}' locked out.", Input.Username);
            ErrorMessage = "Account locked out. Please try again later.";
        }
        else
        {
            Logger.LogInformation("Invalid login attempt from IP '{}'",
                HttpContext.Connection.RemoteIpAddress?.ToString() ?? "unknown");

            ErrorMessage = "Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;
    }
}
